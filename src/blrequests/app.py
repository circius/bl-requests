# -*- coding: utf-8 -*-
"""encapsulates functions which generate BlTables from raw HTML table
data scraped from myrequests.bl.uk

"""
from blrequests.data_definitions import BlTable, BlRow
from bs4 import BeautifulSoup
from bs4 import Tag
from typing import List
import re
import unicodedata

HEADERS = (
    "title",
    "author",
    "shelfmark",
    "year",
    "volume",
    "notes",
    "status",
    "deliver to",
    "date required",
)


def table_generate_bltable(table: Tag) -> BlTable:
    """consumes a beautifulsoup representation of the table of requests
generated by myrequests.bl.uk and produces a BlTable.

    """
    rows = table_get_rows(table)
    return [row_generate_blrow(row) for row in rows]


def row_generate_blrow(row: List[str]) -> BlRow:
    """consumes a row (a list of strings) and produces the corresponding
BlRow

    """
    return {header: cell for header, cell in zip(HEADERS, row)}


def table_get_rows(table: Tag) -> List[List[str]]:
    """consumes a beautifulsoup representation of the table of requests
    generated by myrequests and produces a list of rows.

    """
    rows = table.select("tr.RowStyle")
    return [row_get_cells(row) for row in rows]


def row_get_cells(row: Tag) -> List[str]:
    """consumes a beautifulsoup representation of a single row of a table
of requests generated by myrequests and produces the contents of its cells,
stripping external whitespace and 

    """
    raw_cells_all = row.findAll("td")
    # get rid of the empty cell at the tail of the row
    raw_cells_subset = raw_cells_all[:-1]
    cell_contents = [cell.get_text(strip=True) for cell in raw_cells_subset]
    clean_contents = [cell_clean_whitespace(cell) for cell in cell_contents]
    return clean_contents


def cell_clean_whitespace(s: str) -> str:
    """consumes a string and converts linebreaks,tabs and multiple spaces
to single spaces. Multiple consequent matches will be converted to a
single space.

    """
    whitespace = re.compile(r"[\t\n ]+")
    return whitespace.sub(" ", s)
